# server {
#     listen 80;
#     server_name reports51;
#     location / {
#         return 301 https://$host$request_uri;
#     }
# }
# https://docs.nginx.com/nginx/admin-guide/web-server/web-server/
# If the HTTP host field equals virtual-server-1 
# then this directive is used.
server {
    # If a port is omitted, the standard port is used. Likewise, if 
    # an address is omitted, the server listens on all addresses. If 
    # the listen directive is not included at all, the “standard” port 
    # is 80/tcp and the “default” port is 8000/tcp, depending on superuser privileges.
    # listen [::]:80;
    # listen 172.20.88.64:11371;
    # listen [set-your-IPv6-IP]:11371;
    listen 80; 

    # If there are several servers that match the IP address and port of the request, 
    # NGINX Plus tests the request’s Host header field against the server_name directives 
    # in the server blocks. The parameter to server_name can be a full (exact) name, a 
    # wildcard, or a regular expression. A wildcard is a character string that includes 
    # the asterisk (*) at its beginning, end, or both; the asterisk matches any sequence 
    # of characters. NGINX Plus uses the Perl syntax for regular expressions; precede them 
    # with the tilde (~).
    # If several names match the Host header, NGINX Plus selects one by searching for names 
    # in the following order and using the first match it finds:

    # Exact name
    # Longest wildcard starting with an asterisk, such as *.example.org
    # Longest wildcard ending with an asterisk, such as mail.*
    # First matching regular expression (in order of appearance in the configuration file)   

    # If the Host header field does not match a server name, NGINX Plus routes the request 
    # to the default server for the port on which the request arrived. The default server is 
    # the first one listed in the nginx.conf file, unless you include the default_server parameter 
    # to the listen directive to explicitly designate a server as the default.
    # server_name reports51;
    # server_name pool.sks-keyservers.net;
    # server_name *.pool.sks-keyservers.net;
    # server_name pgp.ipfire.org;
    # server_name keys.gnupg.net;
    server_name virtual-server-1;
    # root /var/www/html;
    root /usr/share/nginx/html/virtual-server-1;
    error_page 404 /404.html;

    # NGINX Plus can send traffic to different proxies or serve different files based on the request URIs. 
    # These blocks are defined using the location directive placed within a server directive.

    # For example, you can define three location blocks to instruct the virtual server to send some requests 
    # to one proxied server, send other requests to a different proxied server, and serve the rest of the 
    # requests by delivering files from the local file system.

    # NGINX Plus tests request URIs against the parameters of all location directives and applies the directives 
    # defined in the matching location. Inside each location block, it is usually possible (with a few exceptions) 
    # to place even more location directives to further refine the processing for specific groups of requests.
    # Note: In this guide, the word location refers to a single location context.

    # There are two types of parameter to the location directive: prefix strings (pathnames) and regular expressions. 
    # For a request URI to match a prefix string, it must start with the prefix string.

    # The following sample location with a pathname parameter matches request URIs that begin with /some/path/, 
    # such as /some/path/document.html. (It does not match /my-site/some/path because /some/path does not occur at 
    # the start of that URI.)

    # location /some/path/ {
    #     #...
    # }

    # A regular expression is preceded with the tilde (~) for case-sensitive matching, or the tilde-asterisk (~*) for 
    # case-insensitive matching. The following example matches URIs that include the string .html or .htm in any position.

    # location ~ \.htm? {
    #     #...
    # }

    location ~ /doesnotexis? {
        #...
        return 301 http://virtual-server-1:8080/moved.html;        
    }

    location ~ /moto? {
        #...
        return 301 http://moto:8080/moved.html;        
    }

    # If the URI contains a reference to any of the files in the parenthesis
    # then a 404 Not Found response status code will be returned
    location ~ (.git|LICENSE|readme.md) {
        deny all;
        return 404;
    }
    location / {
        # ...
    }
}

# If the HTTP host field equals virtual-server-2 
# then this directive is used.

server {
    # If a port is omitted, the standard port is used. Likewise, if 
    # an address is omitted, the server listens on all addresses. If 
    # the listen directive is not included at all, the “standard” port 
    # is 80/tcp and the “default” port is 8000/tcp, depending on superuser privileges.
    listen 80; 
    # listen [::]:80;
    # listen 172.20.88.64:11371;
    # listen [set-your-IPv6-IP]:11371;
    server_name virtual-server-2;
    # server_name reports51;
    # server_name pool.sks-keyservers.net;
    # server_name *.pool.sks-keyservers.net;
    # server_name pgp.ipfire.org;
    # server_name keys.gnupg.net;
    # root /var/www/html;
    root /usr/share/nginx/html/virtual-server-2;
    error_page 404 /404.html;

    # If the URI contains a reference to any of the files in the parenthesis
    # then a 404 Not Found response status code will be returned
    location ~ (.git|LICENSE|readme.md) {
        deny all;
        return 404;
    }
    location / {
        # ...
    }
}

# If the HTTP host field equals virtual-server-3 
# then this directive is used.

server {
    # If a port is omitted, the standard port is used. Likewise, if 
    # an address is omitted, the server listens on all addresses. If 
    # the listen directive is not included at all, the “standard” port 
    # is 80/tcp and the “default” port is 8000/tcp, depending on superuser privileges.
    listen 80; 
    # listen [::]:80;
    # listen 172.20.88.64:11371;
    # listen [set-your-IPv6-IP]:11371;
    server_name virtual-server-3;
    # server_name reports51;
    # server_name pool.sks-keyservers.net;
    # server_name *.pool.sks-keyservers.net;
    # server_name pgp.ipfire.org;
    # server_name keys.gnupg.net;
    # root /var/www/html;
    root /usr/share/nginx/html/virtual-server-3;
    error_page 404 /404.html;

    # If the URI contains a reference to any of the files in the parenthesis
    # then a 404 Not Found response status code will be returned
    location ~ (.git|LICENSE|readme.md) {
        deny all;
        return 404;
    }
    location / {
        # ...
    }
}


# This is the default server directive. 
# If no URI matches were found this section is used.

server {
    # listen 80; 
    # If a port is omitted, the standard port is used. Likewise, if 
    # an address is omitted, the server listens on all addresses. If 
    # the listen directive is not included at all, the “standard” port 
    # is 80/tcp and the “default” port is 8000/tcp, depending on superuser privileges.
    listen 80 default_server; 
    # listen [::]:80;
    # listen 172.20.88.64:11371;
    # listen [set-your-IPv6-IP]:11371;
    server_name reports-avi;
    # server_name reports51;
    # server_name pool.sks-keyservers.net;
    # server_name *.pool.sks-keyservers.net;
    # server_name pgp.ipfire.org;
    # server_name keys.gnupg.net;
    # root /var/www/html;
    root /usr/share/nginx/html;
    error_page 404 /404.html;

    location ~ (.git|LICENSE|readme.md) {
        deny all;
        return 404;
    }
    location / {
        # ...
    }

    # location /pks {
    #     proxy_pass         http://reports51:11371;
    #     proxy_pass_header  Server;
    #     add_header         Via "1.1 reports51:11371 (nginx)";
    # }

    # location /pks {
    #     proxy_pass         http://reports51:11371;
    #     proxy_pass_header  Server;
    #     add_header         Via "1.1 reports51:11371 (nginx)";
    # }

    # location / {
    #     return 301 https://$host$request_uri;
    # }

    # location /pks {
    #     proxy_pass         http://127.0.0.1:11371;
    #     proxy_pass_header  Server;
    #     add_header         Via "1.1 reports51:11371 (nginx)";
    # }
}
