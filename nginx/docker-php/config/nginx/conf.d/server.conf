# Default server definition
server {
    listen [::]:8080 default_server;
    listen 8080 default_server;
    # underscore is the catch-all server name
    server_name _;

    # Enables or disables the use of sendfile().
    sendfile off;
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nodelay
    # Enables or disables the use of the TCP_NODELAY option. The option is enabled when 
    # a connection is transitioned into the keep-alive state. Additionally, it is enabled on 
    # SSL connections, for unbuffered proxying, and for WebSocket proxying.
    tcp_nodelay on;
    # If disabled, redirects issued by nginx will be relative.
    absolute_redirect off;

    # A path to the file is constructed by merely adding a URI to the value of the root directive. 
    # If a URI has to be modified, the alias directive should be used.
    root /var/www/html;
    # http://nginx.org/en/docs/http/ngx_http_index_module.html
    # Defines files that will be used as an index. The file name can contain variables. Files are checked 
    # in the specified order. The last element of the list can be a file with an absolute path. Example:
    # index index.$geo.html index.0.html /index.html;
    # It should be noted that using an index file causes an internal redirect, and the request can be processed in a different location. For example, with the following configuration:

    # location = / {
    #     index index.html;
    # }

    # location / {
    #     ...
    # }
    # a “/” request will actually be processed in the second location as “/index.html”.
    index index.php index.html;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to index.php
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#variables
        # current URI in request, normalized
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#location
        # A path to the file is constructed by merely adding a URI to the value of the root directive. 
        # If a URI has to be modified, the alias directive should be used.

        # Checks the existence of files in the specified order and uses the first found file for request processing; 
        # the processing is performed in the current context. The path to a file is constructed from the file parameter 
        # according to the root and alias directives. It is possible to check directory’s existence by specifying a slash 
        # at the end of a name, e.g. “$uri/”. If none of the files were found, an internal redirect to the uri specified 
        # in the last parameter is made. For example:

        try_files $uri $uri/ /index.php?q=$uri&$args;
    }

    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses
    # 500 Internal Server Error
    # The server has encountered a situation it does not know how to handle.
    # Redirect server error pages to the static page /50x.html
    # Dont need to make this page it is included with nginx own
    # html pages in /var/lib/nginx/html
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /var/lib/nginx/html;
    }
    # FPM FastCGI process module
    # Pass the PHP scripts to PHP-FPM listening on php-fpm.sock
    location ~ \.php$ {
        # 404 nginx will display a not found document.
        # try_files checks the existence of the PHP file before passing the request to the FastCGI server.
        try_files $uri =404;
        # https://nginx.org/en/docs/beginners_guide.html
        # http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_split_path_info
        # Defines a regular expression that captures a value for the $fastcgi_path_info variable. The regular expression should have two captures:
        #  the first becomes a value of the $fastcgi_script_name variable, the second becomes a value of the $fastcgi_path_info variable. 
        # For example, with these settings

        # location ~ ^(.+\.php)(.*)$ {
        #     fastcgi_split_path_info       ^(.+\.php)(.*)$;
        #     fastcgi_param SCRIPT_FILENAME ^(.+\.php)(.*)$;
        #     fastcgi_param PATH_INFO       $fastcgi_path_info;
        # and the “/show.php/article/0001” request, the SCRIPT_FILENAME parameter will be equal to “/path/to/php/show.php”, and the PATH_INFO parameter will be equal to “/article/0001”.

        fastcgi_split_path_info ^(.+\.php)(/.+)$;

        # the proxied server is operating on the /run/php-fpm.sock unix socket
        fastcgi_pass unix:/run/php-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        # fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
        # and the “/page.php” request, the SCRIPT_FILENAME parameter will be equal to “/home/www/scripts/php/page.php”, 
        # and with the “/” request it will be equal to “/home/www/scripts/php/index.php”.        
        fastcgi_index index.php;
        include fastcgi_params;
    }

    # Set the cache-control headers on assets to cache for 5 days
    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
        expires 5d;
    }

    # Deny access to . files, for security
    location ~ /\. {
        log_not_found off;
        deny all;
    }

    # Allow fpm ping and status from localhost
    location ~ ^/(fpm-status|fpm-ping)$ {
        access_log off;
        allow 127.0.0.1;
        deny all;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_pass unix:/run/php-fpm.sock;
    }
}
