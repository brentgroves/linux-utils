Here’s a functional example of a cron expression. This expression runs the command curl http://www.google.com every Tuesday at 5:30 PM:

30 17 * * 2 curl http://www.google.com



Here are some more examples of how to use cron’s scheduling component:

* * * * * - Run the command every minute.
12 * * * * - Run the command 12 minutes after every hour.
0,15,30,45 * * * * - Run the command every 15 minutes.
*/15 * * * * - Run the command every 15 minutes.
0 4 * * * - Run the command every day at 4:00 AM.
0 4 * * 2-4 - Run the command every Tuesday, Wednesday, and Thursday at 4:00 AM.
20,40 */8 * 7-12 * - Run the command on the 20th and 40th minute of every 8th hour every day of the last 6 months of the year.

30 17 

Field	Allowed Values
minute	0-59
hour	0-23
Day of the month	1-31
month	1-12 or JAN-DEC
Day of the week	0-6 or SUN-SAT
Together, tasks scheduled in a crontab are structured like the following:

minute hour day_of_month month day_of_week command_to_run

30 17 21 5 *  echo "Testing msmtp from ${HOSTNAME} with mail command" | mail -s "test mail" bgroves@buschegroup.com

Managing Cron Job Output
Because cron jobs are executed in the background, it isn’t always apparent that they’ve run successfully. Now that you know how to use the crontab command and how to schedule a cron job, you can start experimenting with some different ways of redirecting the output of cron jobs to help you track that they’ve been executed successfully.

If you have a mail transfer agent — such as Sendmail — installed and properly configured on your server, you can send the output of cron tasks to the email address associated with your Linux user profile. You can also manually specify an email address by providing a MAILTO setting at the top of the crontab.

For example, you could add the following lines to a crontab. These include a MAILTO statement followed by an example email address, a SHELL directive that indicates the shell to run (bash in this example), a HOME directive pointing to the path in which to search for the cron binary, and a single cron task:

. . .

MAILTO="example@digitalocean.com"
SHELL=/bin/bash
HOME=/

* * * * * echo ‘Run this command every minute’
This particular job will return “Run this command every minute,” and that output will get emailed every minute to the email address specified after the MAILTO directive.


MAILTO="example@digitalocean.com"
SHELL=/bin/bash
HOME=/

30 17 21 5 *  echo "Testing msmtp from ${HOSTNAME} with mail command" | mail -s "test mail" bgroves@buschegroup.com


30 17 21 5 *  echo "Testing msmtp from ${HOSTNAME} with mail command" | mail -s "test mail" bgroves@buschegroup.com

This particular job will return “Run this command every minute,” and that output will get emailed every minute to the email address specified after the MAILTO directive.

You can also redirect a cron task’s output into a log file or into an empty location to prevent getting an email with the output.

To append a scheduled command’s output to a log file, add >> to the end of the command followed by the name and location of a log file of your choosing, like this:

* * * * * echo ‘Run this command every minute’ >> /directory/path/file.log

52 17 21 5 * echo 'Test 2 Run this command every minute' >> /directory/path/file.log


MAILTO="example@digitalocean.com"
SHELL=/bin/bash
HOME=/


* * * * * echo 'Run this command every minute' >> /home/bgroves@BUSCHE-CNC.COM/file.log

MAILTO="bgroves"

51 17 21 5 *  echo "Testing msmtp from ${HOSTNAME} with mail command" | mail -s "test mail" bgroves@buschegroup.com

1,2,3,4,5 18 21 5 * echo 'Test 2 Run this command every minute' >> /home/bgroves@BUSCHE-CNC.COM/file.log


echo 'Test 3 Run this command every minute' | mail -s "test mail" bgroves@buschegroup.com




